<!-- 网站：网页的集合
     网页：HTML格式的文件，常见格式.html,.htm
     网页是构成网站的基本元素，由图片、文字、视频、超链接等元素构成
     HTML：超文本标记语言(不是编程语言)
     web标准：由w3c组织(万维网联盟)和其他标准化组织制定的一系列标准的集合
              构成：结构(HTML)、表现(CSS)、行为(JavaScript)
              优点：让web的发展前景更广阔
                    内容能被更广泛的设备访问
                    更容易被搜寻引擎搜索
                    降低网站流量费用
                    使网站更易于维护
                    提高页面浏览速度
               -->
<!-- html语法规范-所有的标签必须包裹在尖括号<>内，通常成对出现
                  标签关系：包含(父子)和并列(兄弟) -->
<!-- 常用标签-在合适的地方给个最为合理的标签，可以让页面结构更清晰
              标题标签：<h1>~<h6>,字加粗，依次变小，独占一行
              段落标签：<p>
              换行标签：<br>
              time标签：为时间或日期提供明确语义，页面不显示，而是帮助浏览器和搜索引擎理解页面中的时间信息
              mark标签(双)：给包含的文字添加背景颜色
              文本格式化标签：突出重要性，<strong>加粗，<em>倾斜,<del>删除线,<ins>下划线
              div和span标签:布局网页(划分网页区域，摆放内容)-图片文字都行
                            div(大盒子):独占一行
                            span(小盒子):不换行
              图像标签：<img src="图像URL(路径)">,属性值；同一文件夹内（必须写）
                            alt="文本"，图片不能显示时出现的文字
                            title="文本"，提示文本，鼠标放到图像上显示的文字
                            width="像素",设置图像宽度
                            height="像素"，设置图像高度，二者只设置其一默认相同改变
                            border="像素"，设置图像边框粗细
              音频标签：<audio src="">(同上)
              视频标签：<video src="">(同上)
                       各属性之间要有空格隔开
                       路径；相对路径（常用）
                             绝对路径：盘符开始
              超链接标签(双)：<a href="跳转目标">属性值：链接目标的地址
                                                      空连接：#
                                                      下载链接：点击后直接下载(压缩包)
                                                      网页元素的链接：如图片，文字，视频，音频等(示例如上)
                                                      锚点链接(属性值为#名字)：点击后可快速定位到当前页面的某个位置，与id连用(回顶部可不用，用空连接)
                                target=""属性值：_self,当前窗口打开页面(不加此属性也可，默认当前)
                                                _blank,新窗口打开页面 -->





<!-- 表格(展示数据):table嵌套tr,tr嵌套th(表头)->字体加粗居中，tr嵌套td(内容)靠左
                   表格属性：align(属性值:left、center、right),规定表格相对周围元素的对齐方式
                            border(属性值:1或""),1为有边框，默认""，无边框
                            cellspadding(像素值),规定单元边沿预期内容之间的空白，默认1像素
                            cellspacing(像素值),规定单元格之间的空白，默认2像素
                            width、height
                   结构标签(可省略)：thead(表格头部)
                                    tbody(表格主体)
                                    tfoot(表格底部-汇总信息)
                                    页面不显示，是针对浏览器来说，加了能让结构更清晰
                   合并单元格(不能跨结构标签合并):rowspan(数值为合并单元格数):跨行合并(竖)->保留最上单元格(其他需合并的表格要注释掉或删掉)
                                            colspan:跨列合并(横)->保留最左单元格 -->
<!-- 列表(用于布局，可嵌套使用):
                    *无序列表ul,只能包含li，前面的效果是·(type属性可改样式)
                    *有序列表ol,只能包含li，前面加序号(ol里面添加type属性，可改序号；start属性改开始序号)
                    定义列表dl,包含dt(定义列表的标题)dd(定义列表的描述),描述会缩进 -->
<!-- 表单(收集用户信息):一个完整的表单通常由表单域、表单控件(表单元素)、提示信息 组成
                       表单域(包含表单元素的区域):<form>,把它范围内表单元素信息提交给服务器 
                                                action(属性值:接受信息的地址)
                                                method(get/post),设置提交方式
                                                name(名称)，指定表单名称，以区分一个页面中的多个表单域
                       表单控件(表单元素):<input>(单)表单元素：
                                                type属性的属性值:submit(提交按钮，点击后提交数据到后台-默认功能)
                                                                reset(重置按钮，点击后恢复默认值)
                                                                button(普通按钮，默认没有功能，一般与JavaScript使用)（1、3
                                                                         暂时无法展示）
                                                                text(文本框，用于输入单行文本)
                                                                password(密码框)
                                                                radio(单选框)：实现二选一name属性(属性值需一致)
                                                                checkbox(多选框)
                                                                file(上传文件),multiple多文件上传
                                                                hidden(定义隐藏的输入字段)
                                                                image(定义图像形式的提交按钮)
                                                name属性:定义input元素的名称，(传递数据时 后端根据其name拿数据)
                                                        实现多选一(其属性值需一致)
                                                value属性：规定input元素的值(后台使用)
                                                checked属性:刷新默认勾选
                                                maxlength:规定输入的最大长度
                                                placeholder:占位文本
                                        <select>(双)表单元素(下拉菜单):
                                                嵌套option(下拉菜单的每一项)
                                        <textarea>(双)表单元素:
                                                文本域标签(多行输入文本)
                       表单标签:<label>:增大表单控件的点击范围，如文本框、密码框、上传文件等等(增加用户体验)
                                        input标签的id属性的属性值与label标签的for属性的属性值相同-->
<!-- 特殊字符标记：在网页中原样显示预留字符
                  小于<: &lt  
                  大于>: &gt
                  空格：%nbsp
                  和号：&amp -->

<!-- 查阅网站：百度、W3C、MDN -->







<!-- css(css样式表)：美化网页，布局页面(网页美容师)
                    主要用于设置HTML页面中的文本内容(字体、大小、对齐方式等)、图片的外形(宽高、边框样式、边距等)以及版面的布局和外观显示样式
            最大价值:由html专注去做结构呈现，样式交给css(使结构与样式分离)
            语法规范:由选择器(需改样式的html标签)以及声明组成 -->
<!-- 基础选择器: 标签(元素)选择器:html标签名称
                类选择器:单独选一个或某几个标签(.类名)，不能差异化选择
                        多类名使用(class中写多个类名，空格隔开)
                口诀:样式点定义，结构类调用，一个或多个，开发最常用
                id选择器:"#"定义样式，id属性调用(与类相似)
                         口诀:样式#定义，结构id调用，只能调用一次，别人切勿使用
                通配符选择器:"*"定义样式，选取页面中所有元素(标签)，无需调用 -->
<!-- 字体属性:先在body中设置整个页面的字体，再根据具体情况单独修改
            设置字体font-family: '(多个单词组成的字体，单个可不加引号)';
            设置大小:font-size,不同浏览器默认显示的字号大小不一致，最好明确下来(谷歌默认16xp)
            字体粗细:font-weight(数字不加单位，400=normal，700=bold)
                                (实际开发中提倡使用数字)
            文字样式:font-style(italic倾斜，normal默认值->不倾斜) 
                                (平时很少给文字加斜体，反而给斜体标签em改为不倾斜)
            font-复合属性(简写方式节约代码):严格遵守font: font-style  font-weight  font-size/line-height  font-family;
                            实例：font: italic 700 16px/20px 'Microsoft yahei'
                            无需设置的可省，但必须保留font-size和font-family，否则将不起作用 -->
<!-- 文本属性:文本颜色:预定义的颜色值:red、green等
                      十六进制:#FF0000,#FF6600等
                      rgb代码:rgb(255,0,0)或(100%,0%,0%)等(红,绿,蓝)
                      开发中十六进制最常用
             对齐文本:text-align(水平对齐:left，center，right)
             装饰文本:text-decoration(默认none无装饰线，underline下划线，overline上划线，line-through删除线)
                      删除链接下划线:a {text-decoration: none;}
             文本首行缩进:text-indent(em单位-当前元素1个文字的大小)
             行间距:line-height(单位px)
                    行高由三部分组成:上间距、文本高度、下间距(改的是上下间距)
             字母间的间距：letter-spacing
             单词间的间距： word-spacing
             字母大小写：text-transform(uppercase大写 lowercase小写)
             空格显示：normal默认只识别一个空格 
                      pre保留所敲空格，但文本将不会自动换行
                      nowrap识别一个空格，文本不换行
             控制文字阴影：text-shadow(四个属性值分别控制阴影的x轴方向、Y轴方向、模糊度、颜色)
             制作省略号(三个一起用)：white-space: noprap;(换行设置为不换行)
                                   overflow: hidden;(控制文字溢出，控制文字溢出，scroll滚动条，hidden隐藏)
                                   text-overflow: ellipsis;(省略号处理，clip默认剪掉，ellipsis省略号) -->
<!-- 列表和超连接样式设置：
                        无序列表：list-style(默认disc->黑圆点,circle->空心圆圈,square->黑方块，none->无,自定义图片url())
                        超连接用伪类选择器（第四天）             -->
<!-- css引入方式-css的三种样式表:行内样式表(行内式):在元素标签内部的style属性中设定css样式
                                                 如<p style="color: pink;">粉色</p>
                                内部样式表(嵌入式):在html页面内部写样式，写到style标签内部(style理论上可以放在html任何地方，但一般放在<head>内)
                                                  代码结构清晰，实现分离，但是并没有实现结构与样式完全分离(因为还在html中)
                                外部样式表(链接式):样式单独写到css文件中，之后把css文件引入到HTML页面中使用(适合样式比较多的情况)
                                                  步骤:新建一个后缀名为.css的样式文件，把css代码放进去
                                                       在html页面中使用<link>标签引入css文件(<link rel="stylesheet" href="css文件路径">)
                                                  最常用
                                导入式:@import url() 必须写在第一行 -->








                                <!-- Emmet语法:提高html、css的编写速度
                -->
<!-- css复合选择器:对基本选择器进行组合形成的(更精确、更高效的选择目标元素)
                  *限定式选择器:标签.class属性值/id属性值
                  *后代选择器(包含选择器):元素1 元素2{样式声明}(元素2一定是元素1的后代，对所有元素2修改)
                                         元素1 .元素2(元素1嵌套一个标签，元素2是标签里的class属性值)
                  *子元素选择器:元素1>元素2{样式声明}只能选择作为某元素的最近一级元素(选亲儿子元素)
                  *并集选择器:元素1,元素2{}(可以选择多组标签，同时为他们定义相同的样式)
                                          (任何形式的选择器都可以作为并集选择器的一部分)
                  紧跟兄弟选择器：元素1＋元素2{}(元素1和后面最近的一个元素2)
                  通用选择器(凡是兄弟选择器):元素1~元素2{}(元素1和后面所有的元素2)
                  属性选择器：元素1[]{}
                                p[data-q="h12"],p[data-q="h123"]{}/p[data-q^="h"]{}
                                <p data-q="h12">111111</p>
                                <p data-q="h123">111111</p>
                  伪类选择器:向某些选择器添加特殊效果，常为链接伪类
                            链接伪类:(为确保生效，严格按照LVHA的顺序声明：link,visited,hover,active)
                                    (浏览器有默认样式，实际中都需要给链接单独指定样式)
                                    *a:link  选择所有未被访问的连接
                                    a:visited  选择所有已被访问的连接
                                    *a:hover  选择鼠标指针位于其上的链接
                                    a:active  选择活动链接(鼠标按下还未弹起的连接)
                            :focus伪类选择器:选取获得焦点(光标)的表单元素
                            :root伪类选择器:设置<html>标签的样式，通常用于定义变量
                                            :root{--my-color: ;}
                                            p{background-color:var(--my-color)}
                            排除选择器：body *:not(元素1){}(定义<body>内除了元素1标签的所有标签)
                            独子选择器：元素1:only-child{}(多个元素1中，只有一个孩子的元素1，修改这个孩子的样式)
                            多子选第一或最后孩子选择器：元素1:first-child{}(last-child)
                                                      元素1:not(:first-child){}(除了第一个)
                                                      元素1:nth-child(数字/even/odd){}(数字：第数字个孩子 even:序号为偶数的孩子 odd:序号为奇数的孩子)
                                                      元素1:nth-of-type(数字){}(body中正数第数字个元素1)
                                                      元素1:nth-last-of-type(数字)d{}(body中倒数第数字个元素1)
                                                      元素1:empty{}(没有孩子的元素1)
                            伪元素选择器：元素1::before{content:"文字"/url();}(在元素1孩子的前面插入内容)
                                         元素1::after{content:"文字"/url();}(在元素1孩子的后面插入内容)
                                         元素1::first-letter{}(元素1内容的第一个字母) -->
<!-- css的元素显示模式:元素(标签)以什么方式进行显示，如<div>自己独占一行，如一行可以放多个<span>
                      html元素一般分为块元素和行内元素:
                      块元素:独占一行
                             高、宽、外内边距都可以控制(宽度默认是容器的100%)
                             是个容器及盒子，里面可以放行内或块级元素
                             注意:
                                 文字类的元素内不能使用块级元素(<p>、<h1>~<h6>等)
                      行内元素:一行可以显示多个行内元素
                             高宽直接设置是无效的，默认宽度就是它本身内容的宽度
                             行内元素只能容纳文本或其他行内元素，不可放块级元素
                             注意:
                                 链接里面不能再放链接
                                 特殊情况链接<a>里面可以放块级元素，但是给<a>转换一下块级模式最安全
                      行内块元素:<img/>、<input>、<td>，他们同时具有块元素和行内元素的特点
                                和相邻行内元素(行内块)在一行上，之间有空白间隙，一行可以显示多个
                                默认宽度就是它本身内容的宽度
                                高度、行高、外内边距可改
                      显示模式转换:转换为块元素: display:block;
                                  转换为行内元素: display:inline;
                                  转换为行内块元素：display:inline-block; -->
<!-- css背景属性:给页面元素添加背景样式
                background-color:transparent(透明)/color  (背景颜色)
                background-image:none/url()  (背景图片,便于控制位置,一般用于装饰的小图片或超大背景图,若图片尺寸<盒子尺寸,图片将会沿着x、y轴平铺)
                                 linear-gradient();(设置渐变色，如linear-gradient(to top, red, yellow, green);从下往上红黄绿渐变
                                                                 linear-gradient(to right, red 30%, green 60%);从左往右红(前30%)绿(后60%)渐变
                                                                 linear-gradient(30deg, red, yellow, green);有角度的渐变)
                background-repeat:repeat/no-repeat/repeat-x/repeat-y (背景平铺)(既可以添加背景颜色也可以添加背景图片,但背景图片会压住背景颜色)
                *background-position:x y  ->top,center,bottom,left,right/百分数，px
                                     (方位名词顺序无关，精确坐标定下X轴，Y轴，只指定一个数值,另一个默认居中)
                background-attachment:scroll(滚动，默认)/fixed(固定)(背景图片固定)
                复合型写法:background: 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置;(提倡但不固定)
                            eg:background: black url() no-repeat fixed top;
                background:rgba( , , , );(背景颜色及半透明，最后一个参数0~1，为透明程度)
                background-size:控制背景尺寸(百分比或px)
                background-origin:(border-box->背景图片与边框对齐，padding-box->背景图片与内边距对齐，content-box->背景图片与内容对齐)
                background-clip:同理278，只不过是控制背景颜色
                opacity:控制盒子中所有东西的透明度
                border-image:url() repeat 33%(每次切割图片的33%)/40px(每张图片的宽为40px)
                background-image: linear-gradient(to top, red, yellow, green);
                                      -->





<!-- CSS三大特性:层叠性:解决样式冲突的问题->就近原则(相同选择器设置相同样式,此时一个样式就会覆盖(层叠)另一个样式)
                继承性:子标签会继承父标签某些样式(text-,font-,line-这些元素开头的可以继承，以及color属性)(简化代码，降低CSS样式的复杂性)
                       行高的继承:11~13行(优势:子元素可以根据自己文字大小自动调整行高)
                优先级:选择器相同，执行层叠性
                       选择器不同，根据权重执行:继承或*:0
                                              元素选择器:1
                                              类选择器:10
                                              id选择器:100
                                              行内样式style:1000
                                              !important:无穷大
                                              复合选择器有权重叠加问题（但不会进位）:20~28行 -->







1.定义动画
    (1) @keyframes 动画名称 {
        from{初始css}
        to{结束css}
        }
    (2) @keyframes 动画名称 {
        0%{}
        10%{}
        .......
        100%{}
    }
2.使用动画
    animation: 动画名称 动画花费时长 (速度曲线) (延迟时间) (重复次数) (动画方向) (执行完毕时的状态);
               速度曲线:linear ->匀速
               分步动画:steps() ->(可配合精灵图实现精灵动画)
                        steps(3) ->分三步完成动画
               重复次数:infinite ->一直重复
                        3 ->重复3次
               动画方向:alternate ->使动画可从0%到100%，再从100%到0%
               执行完毕时的状态:forwards ->停在100%
                               backwards ->停在0%(默认)
    注:前两个必写
       如果有两个时间值，第一个表示动画时长，第二个表示延迟时间
       不分先后顺序
       animation-play-state:paused (暂停动画，通常配合hover使用)






<!-- 网页布局方式：标准流(最基本)：就是标签按照规定好的默认方式排列
                  浮动：可以改变元素标签默认的排列方式，可以让多个块级元素一行内排列显示
     网页布局准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动
                  (先设置盒子大小，之后设置盒子的位置) -->
<!-- 浮动：float(none,left,right)
          *特性：*浮动元素会脱离标准流(脱离标准流的控制(浮)移动到指定位置(动)，浮动的盒子不再保留原先的位置)
                 浮动的元素会在一行内显示并且元素顶部对齐，若父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐显示
                 浮动的元素会具有行内块元素的特性(若行内元素有了浮动，则不需要转换为块级/行内块元素就可以直接给高度和宽度)
                                              (若块级盒子没有设置宽度，默认宽度和父级一样宽，但加了浮动之后，它的大小根据内容来决定)
                                              (浮动的盒子中间是没有缝隙的，紧挨在一起)
          浮动元素经常和标准流父级搭配使用：
                  为了约束浮动元素位置，策略：先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则 -->






<!-- 页面布局三大核心：盒子模型、浮动、定位 -->
<!-- 网页布局过程：先准备好相关的网页元素，网页元素基本都是盒子
                  利用css设置好盒子样式，然后摆放到相应位置
                  往盒子里面装内容
                  (核心：利用css摆放盒子) -->
<!-- css盒子模型本质上是一个盒子，封装周围的HTML元素，包括：边框(border)、外边距(margin)、内边距(padding)、实际内容(content) -->
<!-- 组成部分：边框(border):宽度(粗细)border-width (solid(实线)，dashed(虚线)，dotted(点线)，double(双实线))
                            样式border-style
                            颜色border-color
                            (复合型写法：border：;无顺序)
                            单独设置一条边：border-top,border-bottom,border-right,border-left
                            
                            表格的细线边框：border-collapse(合并相邻的边框collapse)
               内边距(padding):padding-left,padding-top,padding-left,padding-right,padding-bottom
                              (复合型写法：padding: ;)(一个值：上下左右；两个值：上下，左右；三个值：上，左右，下；四个值：上，右，下，左)
               外边距(margin):margin-left,margin-ringht,margin-top,margin-bottom
                              (复合型写法与内边距一致)
                              让块级盒子水平居中(对行内元素无效)：
                                                条件：盒子必须指定宽度
                                                     盒子左右的外边距都设置为auto(常用设置：margin: 0 auto;)
                                                若要使盒子内的东西也居中，将其看做是文本内容，在其父级元素中设置中添加text-align: center;
                              外边距合并问题：相邻块元素垂直外边距的合并(只给一个盒子设置就好，取大值)
                                             嵌套块元素垂直外边距的合并(解决方法：为父元素定义上边框
                                                                               为父元素定义上内边距
                                                                               为父元素添加overflow:hidden;(不会使盒子变大，常用))
                    注意：盒子实际大小=盒子width/hight+边框+内边距(当盒子未指定width/hight属性，padding不会撑开盒子大小)
                         清除内外边距：*{
                                         padding: 0;
                                         margin: 0;
                                       }
                         行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距，但是转换为块级和行内块元素就可以 -->
<!-- *圆角边框：border-radius: px/%;(复合型写法同上，两个值是左上角右下角，右上角左下角；)
                分开写：border-top-left-radius、border-top-right-radius、border-bottom-left-radius、border-bottom-right-radius
      盒子阴影：box-shdow（水平阴影位置 垂直阴影位置 （模糊度） （阴影尺寸） （阴影颜色） （将外部阴影改为内部阴影inset））
      文字阴影：text-shdow (水平 垂直 模糊度 颜色) -->
<!-- min-hight:无内容也可显示盒子，内容超过高度，可自适应增大
     max-hight:无内容不可显示盒子，内容超过高度，不可自适应增大 -->